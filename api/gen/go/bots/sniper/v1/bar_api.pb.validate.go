// Licensed to go-monorepo under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. go-monorepo licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: foo/bar/v1/bar_api.proto

package barv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _bar_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PushRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "Bar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PushRequestValidationError is the validation error returned by
// PushRequest.Validate if the designated constraints aren't met.
type PushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushRequestValidationError) ErrorName() string { return "PushRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushRequestValidationError{}

// Validate checks the field values on PushResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PushResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	return nil
}

// PushResponseValidationError is the validation error returned by
// PushResponse.Validate if the designated constraints aren't met.
type PushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushResponseValidationError) ErrorName() string { return "PushResponseValidationError" }

// Error satisfies the builtin error interface
func (e PushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushResponseValidationError{}
